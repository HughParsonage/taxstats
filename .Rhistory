# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[1:500]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[1:800]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[1:900]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[800:900]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[800:850]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[850:875]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[862:875]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[850:863]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[850:860]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[850:855]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[850:858]))
## How are the sample file columns related to each other?
# http://stackoverflow.com/questions/13088770/how-to-write-linearly-dependent-column-in-a-matrix-in-terms-of-linearly-independ
linfinder <- function(mat){
# If the matrix is full rank then we're done
if(qr(mat)$rank == ncol(mat)){
print("Matrix is of full rank")
return(invisible(seq(ncol(mat))))
}
m <- ncol(mat)
# cols keeps track of which columns are linearly independent
cols <- 1
for(i in seq(2, m)){
ids <- c(cols, i)
mymat <- mat[, ids]
if(qr(mymat)$rank != length(ids)){
# Regression the column of interest on the previous
# columns to figure out the relationship
o <- lm(mat[,i] ~ mat[,cols] + 0)
# Construct the output message
start <- names(numeric.sample.file)[i]
# Which coefs are nonzero
nz <- !(abs(coef(o)) <= .Machine$double.eps^0.5)
tmp <- paste("Column", cols[nz], sep = "_")
tmp <- names(numeric.sample.file)[nz]
coef.o <- round(coef(o), 2)
vals <- paste(coef.o[nz], tmp, sep = "*", collapse = " + ")
message <- paste0(start, " = ", vals)
print(message)
} else {
# If the matrix subset was of full rank
# then the newest column in linearly independent
# so add it to the cols list
cols <- ids
}
}
return(invisible(cols))
}
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE]
linfinder(data.matrix(numeric.sample.file[850:856]))
numeric.sample.file[850:856]
qr(numeric.sample.file[850:856])
qr(data.matrix(numeric.sample.file[850:856]))
(data.matrix(numeric.sample.file[850:856]))
numeric.sample.file <- sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE][complete.cases(.)]
numeric.sample.file <-
sample_file_1213[ , which(sapply(sample_file_1213, is.numeric)), with = FALSE] %>%
filter(complete.cases(.))
linfinder(data.matrix(numeric.sample.file))
region_decoder <-
readr::read_tsv("Region	Region_description
0	ACT major urban - capital city
1	NSW major urban - capital city
2	NSW other urban
3	NSW regional - high urbanisation
4	NSW regional - low urbanisation
5	NSW rural
6	NT major urban - capital city
7	NT regional - high urbanisation
8	NT regional - low urbanisation
9	QLD major urban - capital city
10	QLD other urban
11	QLD regional - high urbanisation
12	QLD regional - low urbanisation
13	QLD rural
14	SA major urban - capital city
15	SA regional - high urbanisation
16	SA regional - low urbanisation
17	SA rural
18	TAS major urban - capital city
19	TAS other urban
20	TAS regional - high urbanisation
21	TAS regional - low urbanisation
22	Tas rural
23	VIC major urban - capital city
24	VIC other urban
25	VIC regional - high urbanisation
26	VIC regional - low urbanisation
27	VIC rural
28	WA major urban - capital city
29	WA other urban
30	WA regional - high urbanisation
31	WA regional - low urbanisation
32	WA rural
34	NSW other
35	WA other")
devtools::use_data(region_decoder)
